DROP TABLE IF EXISTS course_teacher_assignments CASCADE;
DROP TABLE IF EXISTS enrollments CASCADE;
DROP TABLE IF EXISTS topics CASCADE;
DROP TABLE IF EXISTS students CASCADE;
DROP TABLE IF EXISTS teachers CASCADE;
DROP TABLE IF EXISTS courses CASCADE;

-- Tabela para os Usuários (unificando Alunos, Professores, Admins)
CREATE TABLE users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    -- Campos específicos que podem ser nulos
    specialty VARCHAR(100),
    stack VARCHAR(100),
    PRIMARY KEY (id)
);

-- Tabela para os Papéis/Perfis (Roles)
CREATE TABLE roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL UNIQUE,
    PRIMARY KEY (id)
);

-- Tabela de Junção para associar Usuários aos seus Papéis
CREATE TABLE user_roles (
    user_id BIGINT NOT NULL,
    role_id BIGINT NOT NULL,
    PRIMARY KEY (user_id, role_id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (role_id) REFERENCES roles(id)
);

-- Tabela para os Cursos
CREATE TABLE courses (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255) NOT NULL UNIQUE,
    category_course VARCHAR(100) NOT NULL,
    PRIMARY KEY (id)
);

-- Tabela para os Tópicos (agora com author_id referenciando users)
CREATE TABLE topics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    title VARCHAR(255) NOT NULL,
    text TEXT NOT NULL,
    creation_date TIMESTAMP NOT NULL,
    status VARCHAR(100) NOT NULL,
    author_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (author_id) REFERENCES users(id),
    FOREIGN KEY (course_id) REFERENCES courses(id)
);

-- Tabela de Junção para Matrículas (agora users <-> courses)
CREATE TABLE enrollments (
    user_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    PRIMARY KEY (user_id, course_id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (course_id) REFERENCES courses(id)
);

-- Tabela de Junção para Associação de Professores (agora users <-> courses)
CREATE TABLE course_teacher_assignments (
    course_id BIGINT NOT NULL,
    teacher_id BIGINT NOT NULL, -- teacher_id agora é um user_id com papel de professor
    PRIMARY KEY (course_id, teacher_id),
    FOREIGN KEY (course_id) REFERENCES courses(id),
    FOREIGN KEY (teacher_id) REFERENCES users(id)
);

-- Inserindo os papéis básicos para uso no sistema
INSERT INTO roles (name) VALUES ('ROLE_STUDENT'), ('ROLE_TEACHER'), ('ROLE_ADMIN'), ('ROLE_MODERATOR');
